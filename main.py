import os
import logging
import requests
import re
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ContentType
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.sessions import StringSession

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("bot")

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
MODEL_ID = "scribe_v1"
GROUP_ID = int(os.getenv("GROUP_ID"))

TELETHON_API_ID = int(os.getenv("TELETHON_API_ID"))
TELETHON_API_HASH = os.getenv("TELETHON_API_HASH")
TELETHON_SESSION = os.getenv("TELETHON_SESSION")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
logger.info(f"BOT_TOKEN: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
logger.info(f"ELEVENLABS_API_KEY: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if ELEVENLABS_API_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
logger.info(f"OPENROUTER_API_KEY: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if OPENROUTER_API_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
logger.info(f"GROUP_ID: {GROUP_ID}")
logger.info(f"TELETHON_API_ID: {TELETHON_API_ID}")
logger.info(f"TELETHON_API_HASH: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELETHON_API_HASH else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
logger.info(f"TELETHON_SESSION: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if TELETHON_SESSION else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")

# –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ Telethon
userbot = TelegramClient(StringSession(TELETHON_SESSION), TELETHON_API_ID, TELETHON_API_HASH)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
async def test_bot_connection():
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram Bot API...")
        me = await bot.get_me()
        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} (ID: {me.id})")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")
        return False

def transcribe(file_path):
    url = "https://api.elevenlabs.io/v1/speech-to-text"
    headers = {
        "xi-api-key": ELEVENLABS_API_KEY,
    }

    with open(file_path, "rb") as f:
        files = {
            "file": (os.path.basename(file_path), f, "audio/ogg"),
        }
        data = {
            "model_id": MODEL_ID,
            "language": "auto"
        }

        response = requests.post(url, headers=headers, files=files, data=data)

    if response.status_code != 200:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç ElevenLabs: {response.status_code} {response.text}")
        return None

    return response.json().get("text", "[–ü—É—Å—Ç–æ]")

def analyze_interview_with_gemini(text, prompt_file):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Gemini 2.0 Flash Lite
    """
    if not OPENROUTER_API_KEY:
        logger.warning("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—â–µ–Ω")
        return None
    
    try:
        # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
        with open(prompt_file, 'r', encoding='utf-8') as f:
            prompt_template = f.read()
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ–º–ø—Ç
        prompt = prompt_template.format(text=text)
        
        url = "https://openrouter.ai/api/v1/chat/completions"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json"
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ OpenRouter
        extra_headers = {
            "HTTP-Referer": "https://github.com/arkhind/ASR_bot",
            "X-Title": "ASR Interview Analyzer"
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers.update(extra_headers)
        
        data = {
            "model": "google/gemini-2.0-flash-lite-001",
            "messages": [
                {
                    "role": "user",
                    "content": prompt
                }
            ],
            "temperature": 0.3,
            "max_tokens": 1500
        }
        
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content'].strip()
        else:
            logger.error(f"–û—à–∏–±–∫–∞ Gemini API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å Gemini: {e}")
        return None

@dp.message(CommandStart())
async def start_handler(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        welcome_text = """
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ASR Interview Analyzer!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É –ª—é–±–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é.

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**

1Ô∏è‚É£ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª** - –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞—É–¥–∏–æ —Ñ–∞–π–ª (mp3, wav) –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª (mp4, avi)

2Ô∏è‚É£ **–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏** - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
   ‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä—É–µ—Ç —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é ElevenLabs
   ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini AI
   ‚Ä¢ –°–æ–∑–¥–∞—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–≤–æ–¥–∫—É

3Ô∏è‚É£ **–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç** - –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å:
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
   ‚Ä¢ –ö–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏
   ‚Ä¢ Soft skills
   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
üéµ –ê—É–¥–∏–æ: mp3, wav, ogg, m4a
üé¨ –í–∏–¥–µ–æ: mp4, avi, mov, mkv
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 2GB
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É! üìã
"""
        await message.answer(welcome_text, parse_mode="Markdown")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–æ–∑–¥–∞–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.")

@dp.message()
async def handle_all_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text[:50] if message.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /start, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
    if message.text and message.text.startswith('/start'):
        await start_handler(message)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞ —Ñ–∞–π–ª, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if message.content_type in {ContentType.VOICE, ContentType.AUDIO, ContentType.VIDEO}:
        await handle_media(message)
        return
    
    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.")

@dp.message(F.content_type.in_({ContentType.VOICE, ContentType.AUDIO, ContentType.VIDEO}))
async def handle_media(message: Message):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    # –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ –≥—Ä—É–ø–ø—É, —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç Telethon
    await bot.copy_message(
        chat_id=GROUP_ID,
        from_chat_id=message.chat.id,
        message_id=message.message_id,
        caption=f"user_id:{message.from_user.id}"
    )

    await message.answer("–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –°–æ–∑–¥–∞—é —Å–≤–æ–¥–∫—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è...")

# –°–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∏—Ö
@userbot.on(events.NewMessage(chats=GROUP_ID))
async def download_from_group(event):
    if event.voice or event.audio or event.video:
        media = await event.download_media()
        logger.info(f"Telethon: —Å–∫–∞—á–∞–Ω —Ñ–∞–π–ª {media}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ —Ç–µ–∫—Å—Ç–∞ (caption)
        match = re.search(r"user_id:(\d+)", event.message.message or "")
        user_id = int(match.group(1)) if match else None

        if not media or not user_id:
            logger.warning("–ù–µ—Ç —Ñ–∞–π–ª–∞ –∏–ª–∏ user_id –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
            return

        text = transcribe(media)

        os.remove(media)
        logger.info("–§–∞–π–ª —É–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")

        if text:
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É —Å –ø–æ–º–æ—â—å—é Gemini
            summary = analyze_interview_with_gemini(text, 'summary_prompt.txt')
            
            if summary:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(
                    chat_id=user_id,
                    text=f"üìã –°–í–û–î–ö–ê –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–Ø\n\n{summary}"
                )
            else:
                # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É
                short_text = text[:1000] + "..." if len(text) > 1000 else text
                await bot.send_message(
                    chat_id=user_id,
                    text=f"üìù –†–ê–°–®–ò–§–†–û–í–ö–ê:\n\n{short_text}\n\n‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENROUTER_API_KEY)"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            short_text = text[:200] + "..." if len(text) > 200 else text
            await bot.send_message(
                chat_id=GROUP_ID, 
                text=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
            
        else:
            await bot.send_message(chat_id=user_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª.")

if __name__ == "__main__":
    import asyncio

    async def main():
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        try:
            logger.info("–ó–∞–ø—É—Å–∫ userbot...")
            await userbot.start()
            logger.info("Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è userbot...")
            if await userbot.is_user_authorized():
                logger.info("Userbot –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            else:
                logger.error("Userbot –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
                return
            
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
            if not await test_bot_connection():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É!")
                return
            
            logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω: {BOT_TOKEN[:10]}...")
            await dp.start_polling(bot)
            logger.info("–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
